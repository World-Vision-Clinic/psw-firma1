// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pharmacy.Repository;

namespace Pharmacy.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20220107151402_EventMigration")]
    partial class EventMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Pharmacy.Model.Ad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PromotionEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Pharmacy.Model.Credential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("HospitalLocalhost")
                        .HasColumnType("text");

                    b.Property<string>("HospitalName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Pharmacy.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Pharmacy.Model.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Localhost")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Pharmacy.Model.Medicine", b =>
                {
                    b.Property<long>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MainPrecautions")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("MedicineName")
                        .HasColumnType("text");

                    b.Property<string>("PotentialDangers")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SideEffects")
                        .HasColumnType("text");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.Property<double>("Weigth")
                        .HasColumnType("double precision");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Pharmacy.Model.MedicineAd", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AdId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicineId")
                        .HasColumnType("bigint");

                    b.Property<double>("PromotionPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("MedicineAds");
                });

            modelBuilder.Entity("Pharmacy.Model.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdEncoded")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Pharmacy.Model.Objection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("HospitalId")
                        .HasColumnType("text");

                    b.Property<string>("IdEncoded")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Objections");
                });

            modelBuilder.Entity("Pharmacy.Model.OfferItem", b =>
                {
                    b.Property<int>("OfferItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Dosage")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicineName")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("TenderOfferId")
                        .HasColumnType("integer");

                    b.HasKey("OfferItemId");

                    b.HasIndex("TenderOfferId");

                    b.ToTable("OfferItems");
                });

            modelBuilder.Entity("Pharmacy.Model.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ObjectionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("Pharmacy.Model.Substance", b =>
                {
                    b.Property<long>("SubstanceId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("SubstanceId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Substances");
                });

            modelBuilder.Entity("Pharmacy.Model.SubstituteMedicine", b =>
                {
                    b.Property<long>("MedicineId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubstituteId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicineId", "SubstituteId");

                    b.HasIndex("SubstituteId");

                    b.ToTable("SubstituteMedicines");
                });

            modelBuilder.Entity("Pharmacy.Model.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HospitalName")
                        .HasColumnType("text");

                    b.Property<string>("TenderHash")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("TenderId");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("Pharmacy.Model.TenderItem", b =>
                {
                    b.Property<int>("TenderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Dosage")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicineName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("TenderId")
                        .HasColumnType("integer");

                    b.HasKey("TenderItemId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderItems");
                });

            modelBuilder.Entity("Pharmacy.Model.TenderOffer", b =>
                {
                    b.Property<int>("TenderOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("TenderId")
                        .HasColumnType("integer");

                    b.Property<string>("TenderOfferHash")
                        .HasColumnType("text");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<bool>("Winner")
                        .HasColumnType("boolean");

                    b.HasKey("TenderOfferId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderOffers");
                });

            modelBuilder.Entity("Pharmacy.Model.MedicineAd", b =>
                {
                    b.HasOne("Pharmacy.Model.Ad", null)
                        .WithMany("MedicinesOnPromotion")
                        .HasForeignKey("AdId");
                });

            modelBuilder.Entity("Pharmacy.Model.OfferItem", b =>
                {
                    b.HasOne("Pharmacy.Model.TenderOffer", null)
                        .WithMany("OfferItems")
                        .HasForeignKey("TenderOfferId");
                });

            modelBuilder.Entity("Pharmacy.Model.Substance", b =>
                {
                    b.HasOne("Pharmacy.Model.Medicine", "Medicine")
                        .WithMany("Substances")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacy.Model.SubstituteMedicine", b =>
                {
                    b.HasOne("Pharmacy.Model.Medicine", "Medicine")
                        .WithMany("SubstituteMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Model.Medicine", "Substitute")
                        .WithMany()
                        .HasForeignKey("SubstituteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacy.Model.TenderItem", b =>
                {
                    b.HasOne("Pharmacy.Model.Tender", null)
                        .WithMany("TenderItems")
                        .HasForeignKey("TenderId");
                });

            modelBuilder.Entity("Pharmacy.Model.TenderOffer", b =>
                {
                    b.HasOne("Pharmacy.Model.Tender", null)
                        .WithMany("TenderOffers")
                        .HasForeignKey("TenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
